name: Build

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: ["DRTVWR-578"]

jobs:
  build:
    strategy:
      matrix:
        runner: [windows-viewer, macos-11]
        configuration: [ReleaseOS]
        addrsize: [64]
        include:
          - runner: windows-viewer
            configuration: ReleaseOS
            addrsize: 32
    runs-on: ${{ matrix.runner }}
    env:
      AUTOBUILD_CONFIGURATION: ${{ matrix.configuration }}
      AUTOBUILD_ADDRSIZE: ${{ matrix.addrsize }}
      AUTOBUILD_INSTALLABLE_CACHE: ${{ github.workspace }}/.autobuild-installables
      AUTOBUILD_VARIABLES_FILE: ${{ github.workspace }}/.build-variables/variables
      AUTOBUILD_VSVER: "170"
      LOGFAIL: debug
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Checkout build variables
        uses: actions/checkout@v3
        with:
          repository: secondlife/build-variables
          ref: viewer
          path: .build-variables
      
      - name: Install autobuild 
        run: pip3 install autobuild

      - name: Cache autobuild packages
        uses: actions/cache@v3
        id: cache-installables
        with:
          path: .autobuild-installables
          key: ${{ runner.os }}-${{ matrix.addrsize }}-${{ matrix.configuration }}-${{ hashFiles('autobuild.xml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.addrsize }}-${{ matrix.configuration }}-
            ${{ runner.os }}-${{ matrix.addrsize }}-

      - name: Install windows dependencies
        if: runner.os == 'Windows'
        run: choco install nsis-unicode

      - name: Build
        id: build
        shell: bash
        env:
          RUNNER_OS: ${{ runner.os }}
        run: |
          pip install llsd # Required by viewer tests
          autobuild configure
          autobuild build --no-configure

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            installer_path=$(find ./build-*/newview/ | grep '_Setup\.exe')
            installer_name="$(basename $installer_path)"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            installer_path=$(find ./build-*/newview/ | grep '\.dmg')
            installer_name="$(basename $installer_path)"
          fi
          echo "installer_path=$installer_path" >> $GITHUB_OUTPUT
          echo "installer_name=$installer_name" >> $GITHUB_OUTPUT
      
      - name: Upload installer
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build.outputs.installer_name }}
          path: ${{ steps.build.outputs.installer_path }}
